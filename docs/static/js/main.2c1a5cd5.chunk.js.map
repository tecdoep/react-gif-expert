{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACE,sBAAMC,SAVY,SAACC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IAC1BR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,MAMhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfjB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACgCC,UAAUH,GAD1C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KACDC,EAAMD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACxB,MAAO,CACLC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QARhB,kBAWdM,GAXc,4CAAH,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEvC,OACE,sBAAKc,UAAU,uBAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDf,SAACA,GAAY,IAAD,EAEVd,mBAAS,CAACqB,KAAK,GAAGa,SAAQ,IAFhB,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAepC,OAXAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAChB,SAAAC,GACEH,EAAS,CACPf,KAAKkB,EACLL,SAAQ,SAId,CAACpB,IAEIqB,EDb0BK,CAAa1B,GAAtCoB,EAD+B,EAC/BA,QAAcP,EADiB,EACtBN,KAEjB,OACE,qCACE,oBAAIS,UAAU,kBAAd,SAAiChB,IAChCoB,GAAW,mBAAGJ,UAAU,iBAAb,wBACZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEiBjBgB,EA1BM,WAAO,IAAD,EAEWzC,mBAAS,CAAC,SAFrB,mBAElB0C,EAFkB,KAEN3C,EAFM,KAQzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAEA,6BAEI2C,EAAWnB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCjB1B6B,IAASC,OACN,cAAC,EAAD,IACDC,SAASC,eAAe,W","file":"static/js/main.2c1a5cd5.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({setCategories}) => {\n  \n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange =(e)=>{\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit =(e)=>{\n    e.preventDefault();\n    if(inputValue.trim().length>2){\n      setCategories(cats=>[inputValue,...cats]);\n      setInputValue('');\n    }\n  }\n\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories:PropTypes.func.isRequired,\n};\n","\n\nexport const getGifs = async (category) => {\n  const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=yAkkhXx6dzgY7eZM2DtjJDyd8PF1oSgP`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n  const gifs= data.map(img=>{ \n    return {\n      id:img.id,\n      title:img.title,\n      url:img.images?.downsized_medium.url,\n    }\n  });\n  return gifs;\n};","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, url }) => {\n  \n  return (\n    <div className='card animate__fadeIn'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { loading, data:images } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__fadeIn\">{category}</h3>\n      {loading && <p className='animate__flash'>Loading...</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import {useState,useEffect} from 'react';\nimport { getGifs } from \"../helpers/getGif\";\n\nexport const useFetchGifs=(category)=>{\n\n  const [state, setState] = useState({data:[],loading:true});\n\n  useEffect(() => {\n    getGifs(category).then(\n      imgs=>{\n        setState({\n          data:imgs,\n          loading:false\n        })\n      }\n    )\n  },[category]);\n  \n  return state;\n}","import React,{useState} from 'react';\nimport { AddCategory } from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\nconst GifExpertApp = () => {\n  \n  const [categories, setCategories] = useState(['Goku']);\n  /** \n  const handleAdd=()=> {\n    setCategories([...categories,'Big Bang Theory']);\n  }\n  */\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      {/* <pre>{JSON.stringify(saludo,null,3)}</pre> */}\n      <hr />\n      {/*<button onClick={handleAdd}>Agregar</button>*/}\n      <ol>\n        {\n          categories.map(category=>(\n            <GifGrid key={category} category={category}/>\n          ))\n        }\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp';\n\nReactDOM.render(  \n   <GifExpertApp/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}